/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health check endpoint */
        get: operations["healthCheck"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List users with pagination
         * @description Retrieve a paginated list of users
         */
        get: operations["listUsers"];
        put?: never;
        /**
         * Create a new user profile
         * @description Create a user profile (typically called by system after Cognito signup)
         */
        post: operations["createUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/signup-with-invite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Complete signup with team invite code
         * @description Complete user profile after Cognito signup using team invite code
         */
        post: operations["signupWithInvite"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/verify-invite-code/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Verify team invite code
         * @description Check if invite code is valid and return team information
         */
        get: operations["verifyInviteCode"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/join-team": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Join team with invite code
         * @description Allows existing users to join a team using an invite code
         */
        post: operations["joinTeam"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current user profile
         * @description Retrieves the profile of the currently authenticated user
         */
        get: operations["getCurrentUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user by ID */
        get: operations["getUser"];
        /** Update user */
        put: operations["updateUser"];
        post?: never;
        /** Delete user */
        delete: operations["deleteUser"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List teams
         * @description Retrieves a paginated list of teams for the authenticated user
         */
        get: operations["listTeams"];
        put?: never;
        /**
         * Create a new team
         * @description Creates a new team for the authenticated user
         */
        post: operations["createTeam"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/by-invite-code/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get team by invite code
         * @description Retrieves a team by its invite code for verification
         */
        get: operations["getTeamByInviteCode"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Team ID */
                id: string;
            };
            cookie?: never;
        };
        /**
         * Get team by ID
         * @description Retrieves a specific team by its ID
         */
        get: operations["getTeam"];
        /**
         * Update team
         * @description Updates an existing team
         */
        put: operations["updateTeam"];
        post?: never;
        /**
         * Delete team
         * @description Deletes an existing team
         */
        delete: operations["deleteTeam"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List team members
         * @description Retrieves a paginated list of team members for the authenticated user's teams
         */
        get: operations["listMembers"];
        put?: never;
        /**
         * Add a member to a team
         * @description Adds a new member to a team with specified role and permissions
         */
        post: operations["createMember"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/members/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Member ID */
                id: string;
            };
            cookie?: never;
        };
        /**
         * Get member by ID
         * @description Retrieves a specific team member by their ID
         */
        get: operations["getMember"];
        /**
         * Update member
         * @description Updates an existing team member's role, status, or permissions
         */
        put: operations["updateMember"];
        post?: never;
        /**
         * Remove member
         * @description Removes a member from a team
         */
        delete: operations["deleteMember"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/games": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List games
         * @description Retrieves a paginated list of games for teams
         */
        get: operations["listGames"];
        put?: never;
        /**
         * Create a new game/match
         * @description Creates a new game for a team
         */
        post: operations["createGame"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/games/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Game ID */
                id: string;
            };
            cookie?: never;
        };
        /**
         * Get game by ID
         * @description Retrieves a specific game by its ID
         */
        get: operations["getGame"];
        /**
         * Update game
         * @description Updates an existing game's details, score, or status
         */
        put: operations["updateGame"];
        post?: never;
        /**
         * Delete game
         * @description Deletes/cancels an existing game
         */
        delete: operations["deleteGame"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/videos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List videos
         * @description Retrieves a paginated list of videos
         */
        get: operations["listVideos"];
        put?: never;
        /**
         * Create a new video
         * @description Creates a new video entry for a game
         */
        post: operations["createVideo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/videos/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Video ID */
                id: string;
            };
            cookie?: never;
        };
        /**
         * Get video by ID
         * @description Retrieves a specific video by its ID
         */
        get: operations["getVideo"];
        /**
         * Update video
         * @description Updates an existing video's metadata, status, or details
         */
        put: operations["updateVideo"];
        post?: never;
        /**
         * Delete video
         * @description Deletes an existing video and optionally removes the S3 file
         */
        delete: operations["deleteVideo"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/videos/teams/{teamId}/games/{gameId}/upload-url": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Team ID */
                teamId: string;
                /** @description Game ID */
                gameId: string;
            };
            cookie?: never;
        };
        /**
         * Get signed URL for video upload
         * @description Generates a pre-signed S3 URL for uploading a video file
         */
        get: operations["getVideoSignedUrl"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/videos/{videoId}/process": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Video ID */
                videoId: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Process video with MediaConvert
         * @description Triggers AWS MediaConvert processing for adaptive streaming
         */
        post: operations["processVideo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/videos/{videoId}/processing-status": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Video ID */
                videoId: string;
            };
            cookie?: never;
        };
        /**
         * Check video processing status
         * @description Check the status of MediaConvert job for the video
         */
        get: operations["checkProcessingStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/videos/upload-from-url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload video from URL asynchronously
         * @description Start an asynchronous task to download a video from a URL, upload it to S3, and create a video record
         */
        post: operations["uploadVideoFromUrl"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/analyses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List analyses
         * @description Retrieves a paginated list of AI analyses
         */
        get: operations["listAnalyses"];
        put?: never;
        /**
         * Create a new AI analysis
         * @description Creates a new AI analysis for a video
         */
        post: operations["createAnalysis"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/analyses/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Analysis ID */
                id: string;
            };
            cookie?: never;
        };
        /**
         * Get analysis by ID
         * @description Retrieves a specific AI analysis by its ID
         */
        get: operations["getAnalysis"];
        /**
         * Update analysis
         * @description Updates an existing AI analysis (typically used by AI processing systems)
         */
        put: operations["updateAnalysis"];
        post?: never;
        /**
         * Delete analysis
         * @description Deletes an existing AI analysis
         */
        delete: operations["deleteAnalysis"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/analyses/{gameId}/{videoId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Game ID */
                gameId: string;
                /** @description Video ID */
                videoId: string;
            };
            cookie?: never;
        };
        /**
         * Get video analysis results
         * @description Retrieves all analysis results for a specific video, with optional filtering by prompt type and segment
         */
        get: operations["getVideoAnalyses"];
        put?: never;
        /**
         * Start async video analysis with Gemini AI
         * @description Creates an async video analysis task that processes 15-second video clips in the background using stored match time markers. Returns immediately with a task ID for polling status.
         */
        post: operations["analyzeVideo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/{taskId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Task ID returned from async operation */
                taskId: string;
            };
            cookie?: never;
        };
        /**
         * Poll async task status
         * @description Check the status and results of an asynchronous task. Poll this endpoint to get task completion status and results.
         */
        get: operations["pollTask"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Base entity with common fields */
        BaseEntity: {
            /**
             * Format: uuid
             * @description Unique identifier for the entity
             */
            id?: string;
            /**
             * Format: date-time
             * @description Timestamp when the entity was created
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description Timestamp when the entity was last updated
             */
            updatedAt?: string;
        };
        UserScopedEntity: components["schemas"]["BaseEntity"] & {
            /** @description Username of the user who created this entity */
            createdBy: string;
        };
        /** @description Base DynamoDB item structure with all required keys */
        DynamoDbItem: {
            /** @description DynamoDB Partition Key */
            PK: string;
            /** @description DynamoDB Sort Key */
            SK: string;
            /** @description Global Secondary Index 1 Partition Key */
            GSI1PK: string;
            /** @description Global Secondary Index 1 Sort Key */
            GSI1SK: string;
            /** @description Global Secondary Index 2 Partition Key (optional for global entities) */
            GSI2PK?: string;
            /** @description Global Secondary Index 2 Sort Key (optional for global entities) */
            GSI2SK?: string;
            /** @description Global Secondary Index 3 Partition Key (optional) */
            GSI3PK?: string;
            /** @description Global Secondary Index 3 Sort Key (optional) */
            GSI3SK?: string;
            /** @description Type of entity for filtering */
            entityType: string;
        };
        UserScopedDbItem: components["schemas"]["DynamoDbItem"] & {
            PK?: unknown;
            GSI2PK: unknown;
            GSI2SK: unknown;
        };
        GlobalDbItem: components["schemas"]["DynamoDbItem"] & {
            PK?: unknown;
        };
        User: components["schemas"]["BaseEntity"] & {
            /** @description Unique username from Cognito */
            username: string;
            /**
             * Format: email
             * @description User email address
             */
            email: string;
            /** @description User's first name */
            firstName: string;
            /** @description User's last name */
            lastName: string;
            /**
             * @description User role in the system
             * @default player
             * @enum {string}
             */
            role: "player" | "manager";
            /**
             * @description Whether the user account is active
             * @default true
             */
            isActive: boolean;
            /**
             * Format: date-time
             * @description Last login timestamp
             */
            lastLoginAt?: string;
            /**
             * Format: uri
             * @description URL to user's profile image
             */
            profileImageUrl?: string;
            /** @description User's phone number */
            phoneNumber?: string;
            /**
             * Format: date
             * @description User's date of birth
             */
            dateOfBirth?: string;
            /**
             * @description How the user signed up
             * @enum {string}
             */
            signupSource: "direct" | "team_invite" | "invite_code";
            /**
             * Format: uuid
             * @description Team ID if user joined through invite
             */
            joinedTeamId?: string;
            /** @description 4-digit invite code used during signup */
            inviteCode?: string;
            /** @description Cognito user ID for linking */
            cognitoUserId?: string;
            /**
             * @description Whether email is verified
             * @default false
             */
            emailVerified: boolean;
            /** @description User preferences and settings */
            preferences?: {
                /** @default true */
                notifications: boolean;
                /** @default false */
                newsletter: boolean;
                /**
                 * @default auto
                 * @enum {string}
                 */
                theme: "light" | "dark" | "auto";
            };
        };
        UserDbItem: components["schemas"]["GlobalDbItem"] & components["schemas"]["User"] & {
            /** @enum {unknown} */
            entityType?: "USER";
        };
        CreateUserRequest: {
            username: string;
            /** Format: email */
            email: string;
            firstName: string;
            lastName: string;
            /**
             * @default player
             * @enum {string}
             */
            role: "player" | "manager";
            phoneNumber?: string;
            /** Format: date */
            dateOfBirth?: string;
            /** Format: uri */
            profileImageUrl?: string;
            /** @description 4-digit team invite code for automatic team joining */
            inviteCode?: string;
            /** @description Cognito user ID for system-created profiles */
            cognitoUserId?: string;
            /**
             * @default direct
             * @enum {string}
             */
            signupSource: "direct" | "team_invite" | "invite_code";
            preferences?: {
                /** @default true */
                notifications: boolean;
                /** @default false */
                newsletter: boolean;
                /**
                 * @default auto
                 * @enum {string}
                 */
                theme: "light" | "dark" | "auto";
            };
        };
        SignUpWithInviteRequest: {
            /** @description 4-digit team invite code */
            inviteCode: string;
            firstName: string;
            lastName: string;
            phoneNumber?: string;
            /** Format: date */
            dateOfBirth?: string;
            preferences?: {
                /** @default true */
                notifications: boolean;
                /** @default false */
                newsletter: boolean;
            };
        };
        UpdateUserRequest: {
            /** Format: email */
            email?: string;
            firstName?: string;
            lastName?: string;
            /** @enum {string} */
            role?: "player" | "manager";
            isActive?: boolean;
            /** Format: uri */
            profileImageUrl?: string;
            phoneNumber?: string;
            /** Format: date */
            dateOfBirth?: string;
            /** Format: uuid */
            joinedTeamId?: string;
            /** @enum {string} */
            signupSource?: "direct" | "team_invite" | "invite_code";
            inviteCode?: string;
            preferences?: {
                notifications?: boolean;
                newsletter?: boolean;
                /** @enum {string} */
                theme?: "light" | "dark" | "auto";
            };
        };
        UserResponse: {
            message?: string;
            data?: components["schemas"]["User"];
        };
        UserListResponse: {
            message?: string;
            data?: {
                result?: components["schemas"]["User"][];
                /** @description Pagination token */
                nextToken?: string;
                /** @description Whether more results exist */
                hasMore?: boolean;
                pagination?: {
                    limit?: number;
                    hasMore?: boolean;
                };
            };
        };
        Team: components["schemas"]["UserScopedEntity"] & {
            /** @description Team name */
            name: string;
            /** @description Team description */
            description?: string;
            /** @description Sport the team plays */
            sport: string;
            /**
             * @description Team status
             * @default active
             * @enum {string}
             */
            status: "active" | "inactive" | "archived";
            /** @description Team members */
            members?: {
                /**
                 * Format: uuid
                 * @description User ID of team member
                 */
                userId: string;
                /**
                 * Format: uuid
                 * @description Member ID for API operations (update/delete)
                 */
                memberId?: string;
                /** @description Username of team member */
                username?: string;
                /** @description Member's first name */
                firstName?: string;
                /** @description Member's last name */
                lastName?: string;
                /**
                 * @description Role in the team
                 * @default player
                 * @enum {string}
                 */
                role: "captain" | "player" | "coach" | "manager";
                /**
                 * Format: date-time
                 * @description When the member joined the team
                 */
                joinedAt?: string;
            }[];
            /** @description Team settings */
            settings?: {
                /**
                 * @description Whether the team is publicly visible
                 * @default false
                 */
                isPublic: boolean;
                /**
                 * @description Whether users can request to join
                 * @default true
                 */
                allowJoinRequests: boolean;
                /**
                 * @description Maximum number of team members
                 * @default 25
                 */
                maxMembers: number;
                /** @description Unique 4-digit invite code for team joining */
                inviteCode?: string;
                /**
                 * @description Whether invite code functionality is enabled
                 * @default true
                 */
                inviteCodeEnabled: boolean;
            };
            /** @description Team statistics */
            stats?: {
                /**
                 * @description Number of wins
                 * @default 0
                 */
                wins: number;
                /**
                 * @description Number of losses
                 * @default 0
                 */
                losses: number;
                /**
                 * @description Number of draws
                 * @default 0
                 */
                draws: number;
                /**
                 * @description Total games played
                 * @default 0
                 */
                gamesPlayed: number;
            };
        };
        TeamDbItem: components["schemas"]["DynamoDbItem"] & components["schemas"]["Team"] & {
            PK?: unknown;
            SK?: unknown;
            GSI2PK: unknown;
            GSI2SK: unknown;
            /** @enum {unknown} */
            entityType?: "TEAM";
        };
        CreateTeamRequest: {
            name: string;
            description?: string;
            /** @default Football */
            sport: string;
            /**
             * @default active
             * @enum {string}
             */
            status: "active" | "inactive" | "archived";
            members?: {
                /** Format: uuid */
                userId: string;
                username?: string;
                firstName?: string;
                lastName?: string;
                /**
                 * @default player
                 * @enum {string}
                 */
                role: "captain" | "player" | "coach" | "manager";
            }[];
            settings?: {
                /** @default false */
                isPublic: boolean;
                /** @default true */
                allowJoinRequests: boolean;
                /** @default 25 */
                maxMembers: number;
            };
        };
        UpdateTeamRequest: {
            name?: string;
            description?: string;
            sport?: string;
            /** @enum {string} */
            status?: "active" | "inactive" | "archived";
            members?: {
                /** Format: uuid */
                userId: string;
                username?: string;
                firstName?: string;
                lastName?: string;
                /** @enum {string} */
                role: "captain" | "player" | "coach" | "manager";
            }[];
            settings?: {
                isPublic?: boolean;
                allowJoinRequests?: boolean;
                maxMembers?: number;
                /** @description Unique 4-digit invite code for team joining */
                inviteCode?: string;
                /** @description Whether invite code functionality is enabled */
                inviteCodeEnabled?: boolean;
            };
            stats?: {
                wins?: number;
                losses?: number;
                draws?: number;
                gamesPlayed?: number;
            };
        };
        TeamResponse: {
            message?: string;
            data?: components["schemas"]["Team"];
        };
        TeamListResponse: {
            message?: string;
            data?: {
                result?: components["schemas"]["Team"][];
                /** @description Pagination token */
                nextToken?: string;
                /** @description Whether more results exist */
                hasMore?: boolean;
                pagination?: {
                    limit?: number;
                    hasMore?: boolean;
                };
            };
        };
        Member: components["schemas"]["BaseEntity"] & {
            /**
             * Format: uuid
             * @description ID of the team this member belongs to
             */
            teamId: string;
            /** @description Username of the member */
            username: string;
            /** @description Member's first name */
            firstName?: string;
            /** @description Member's last name */
            lastName?: string;
            /**
             * @description Role of the member in the team
             * @default player
             * @enum {string}
             */
            role: "player" | "captain" | "coach" | "manager" | "assistant_coach";
            /**
             * @description Status of the member
             * @default pending
             * @enum {string}
             */
            status: "active" | "inactive" | "pending" | "invited" | "suspended";
            /**
             * Format: date-time
             * @description When the member joined the team
             */
            joinedAt?: string;
            /**
             * Format: date-time
             * @description When the member was invited to the team
             */
            invitedAt?: string;
            /** @description Username of who invited this member */
            invitedBy?: string;
            /** @description Member permissions */
            permissions?: {
                /**
                 * @description Can invite new members
                 * @default false
                 */
                canInviteMembers: boolean;
                /**
                 * @description Can remove members
                 * @default false
                 */
                canRemoveMembers: boolean;
                /**
                 * @description Can edit team details
                 * @default false
                 */
                canEditTeam: boolean;
                /**
                 * @description Can manage team games/matches
                 * @default false
                 */
                canManageGames: boolean;
            };
            /** @description Additional member data */
            memberData?: {
                /** @description Player position (e.g., forward, goalkeeper) */
                position?: string;
                /** @description Jersey number */
                jerseyNumber?: number;
                /** @description Emergency contact information */
                emergencyContact?: {
                    name?: string;
                    phone?: string;
                    relationship?: string;
                };
                /** @description Additional notes about the member */
                notes?: string;
            };
        };
        MemberDbItem: components["schemas"]["DynamoDbItem"] & components["schemas"]["Member"] & {
            PK?: unknown;
            SK?: unknown;
            GSI2PK: unknown;
            GSI2SK: unknown;
            /** @enum {unknown} */
            entityType?: "MEMBER";
        };
        CreateMemberRequest: {
            /** Format: uuid */
            teamId: string;
            username: string;
            /** @description Member's first name */
            firstName?: string;
            /** @description Member's last name */
            lastName?: string;
            /**
             * @default player
             * @enum {string}
             */
            role: "player" | "captain" | "coach" | "manager" | "assistant_coach";
            /**
             * @default pending
             * @enum {string}
             */
            status: "active" | "inactive" | "pending" | "invited" | "suspended";
            permissions?: {
                /** @default false */
                canInviteMembers: boolean;
                /** @default false */
                canRemoveMembers: boolean;
                /** @default false */
                canEditTeam: boolean;
                /** @default false */
                canManageGames: boolean;
            };
            memberData?: {
                position?: string;
                jerseyNumber?: number;
                emergencyContact?: {
                    name?: string;
                    phone?: string;
                    relationship?: string;
                };
                notes?: string;
            };
        };
        UpdateMemberRequest: {
            /** @enum {string} */
            role?: "player" | "captain" | "coach" | "manager" | "assistant_coach";
            /** @enum {string} */
            status?: "active" | "inactive" | "pending" | "invited" | "suspended";
            permissions?: {
                canInviteMembers?: boolean;
                canRemoveMembers?: boolean;
                canEditTeam?: boolean;
                canManageGames?: boolean;
            };
            memberData?: {
                position?: string;
                jerseyNumber?: number;
                emergencyContact?: {
                    name?: string;
                    phone?: string;
                    relationship?: string;
                };
                notes?: string;
            };
        };
        MemberResponse: {
            message?: string;
            data?: components["schemas"]["Member"];
        };
        MemberListResponse: {
            message?: string;
            data?: {
                result?: components["schemas"]["Member"][];
                /** @description Pagination token */
                nextToken?: string;
                /** @description Whether more results exist */
                hasMore?: boolean;
                pagination?: {
                    limit?: number;
                    hasMore?: boolean;
                };
            };
        };
        Game: components["schemas"]["BaseEntity"] & {
            /**
             * Format: uuid
             * @description ID of the team this game belongs to (null for public games)
             */
            teamId?: string | null;
            /** @description Name of the opponent team */
            opponentTeam: string;
            /**
             * Format: uuid
             * @description ID of opponent team if it exists in the system
             */
            opponentTeamId?: string;
            /**
             * @description Type of game
             * @enum {string}
             */
            gameType: "league" | "friendly" | "tournament" | "cup" | "playoff";
            /**
             * @description Current status of the game
             * @default scheduled
             * @enum {string}
             */
            status: "scheduled" | "in_progress" | "completed" | "cancelled" | "postponed";
            /**
             * Format: date-time
             * @description Scheduled date and time of the game
             */
            scheduledDate: string;
            /**
             * Format: date-time
             * @description Actual start time of the game
             */
            actualStartTime?: string;
            /**
             * Format: date-time
             * @description Actual end time of the game
             */
            actualEndTime?: string;
            /** @description Game venue information */
            venue?: {
                /** @description Name of the venue */
                name?: string;
                /** @description Address of the venue */
                address?: string;
                /**
                 * @description Whether this is a home game
                 * @default true
                 */
                isHome: boolean;
            };
            /** @description Game score */
            score?: {
                /** @description Home team score */
                home?: number;
                /** @description Away team score */
                away?: number;
                /** @description Whether our team is the home team */
                isHomeTeam?: boolean;
            };
            /** @description Additional game data and statistics */
            gameData?: {
                /** @description Game duration in minutes */
                duration?: number;
                /** @description Referee name */
                referee?: string;
                /** @description Weather conditions */
                weather?: string;
                /** @description Number of attendees */
                attendance?: number;
                /** @description Additional game notes */
                notes?: string;
                /** @description Game highlights and events */
                highlights?: {
                    minute?: number;
                    /** @enum {string} */
                    event?: "goal" | "yellow_card" | "red_card" | "substitution" | "injury" | "other";
                    player?: string;
                    description?: string;
                }[];
            };
            /**
             * @description Whether this game is publicly accessible without authentication
             * @default false
             */
            isPublic: boolean;
        };
        GameDbItem: components["schemas"]["DynamoDbItem"] & components["schemas"]["Game"] & {
            /** @description Team ID for team games, or PublicGame for public games */
            PK?: unknown | unknown;
            SK?: unknown;
            /** @description Game ID for team games, or PublicGame for public games */
            GSI2PK: unknown | unknown;
            GSI2SK: unknown;
            /** @enum {unknown} */
            entityType?: "GAME";
        };
        CreateGameRequest: {
            name?: string;
            /** Format: uuid */
            teamId?: string;
            opponentTeam: string;
            /** Format: uuid */
            opponentTeamId?: string;
            /** @enum {string} */
            gameType?: "league" | "friendly" | "tournament" | "cup" | "playoff";
            /**
             * @default scheduled
             * @enum {string}
             */
            status: "scheduled" | "in_progress" | "completed" | "cancelled" | "postponed";
            /** Format: date-time */
            scheduledDate?: string;
            venue?: {
                name?: string;
                address?: string;
                /** @default true */
                isHome: boolean;
            };
            gameData?: {
                referee?: string;
                weather?: string;
                notes?: string;
            };
            /**
             * @description Whether this game should be publicly accessible without authentication
             * @default false
             */
            isPublic: boolean;
        };
        UpdateGameRequest: {
            opponentTeam?: string;
            /** Format: uuid */
            opponentTeamId?: string;
            /** @enum {string} */
            gameType?: "league" | "friendly" | "tournament" | "cup" | "playoff";
            /** @enum {string} */
            status?: "scheduled" | "in_progress" | "completed" | "cancelled" | "postponed";
            /** Format: date-time */
            scheduledDate?: string;
            /** Format: date-time */
            actualStartTime?: string;
            /** Format: date-time */
            actualEndTime?: string;
            venue?: {
                name?: string;
                address?: string;
                isHome?: boolean;
            };
            score?: {
                home?: number;
                away?: number;
                isHomeTeam?: boolean;
            };
            gameData?: {
                duration?: number;
                referee?: string;
                weather?: string;
                attendance?: number;
                notes?: string;
                highlights?: {
                    minute?: number;
                    /** @enum {string} */
                    event?: "goal" | "yellow_card" | "red_card" | "substitution" | "injury" | "other";
                    player?: string;
                    description?: string;
                }[];
            };
            /** @description Whether this game should be publicly accessible without authentication */
            isPublic?: boolean;
        };
        GameResponse: {
            message?: string;
            data?: components["schemas"]["Game"];
        };
        GameListResponse: {
            message?: string;
            data?: {
                result?: components["schemas"]["Game"][];
                /** @description Pagination token */
                nextToken?: string;
                /** @description Whether more results exist */
                hasMore?: boolean;
                pagination?: {
                    limit?: number;
                    hasMore?: boolean;
                };
            };
        };
        Video: components["schemas"]["BaseEntity"] & {
            /**
             * Format: uuid
             * @description ID of the game this video belongs to
             */
            gameId: string;
            /** @description Title or name of the video */
            title: string;
            /** @description Description of the video content */
            description?: string;
            /** @description S3 object key where the video file is stored */
            s3Key: string;
            /**
             * Format: uri
             * @description URL to access the video file
             */
            s3Url: string;
            /**
             * @description Type of video content
             * @enum {string}
             */
            videoType: "highlight" | "full_game" | "training" | "interview" | "analysis" | "other";
            /**
             * @description Current status of the video
             * @default processing
             * @enum {string}
             */
            status: "processing" | "processed" | "ready" | "failed" | "archived";
            /** @description Video duration in seconds */
            duration?: number;
            /** @description Video file size in bytes */
            fileSize?: number;
            /** @description Technical metadata about the video */
            videoMetadata?: {
                /** @description Video resolution (e.g., 1920x1080) */
                resolution?: string;
                /** @description Video framerate (fps) */
                framerate?: number;
                /** @description Video codec used */
                codec?: string;
                /** @description Video bitrate in kbps */
                bitrate?: number;
                /** @description Video file format (e.g., mp4, avi) */
                format?: string;
            };
            /** @description S3 key for video thumbnail image */
            thumbnailS3Key?: string;
            /**
             * Format: uri
             * @description URL for video thumbnail image
             */
            thumbnailS3Url?: string;
            /** @description Username of who uploaded the video */
            uploadedBy?: string;
            /** @description Tags for categorizing the video */
            tags?: string[];
            /** @description AWS MediaConvert job ID for video processing */
            mediaConvertJobId?: string;
            /**
             * Format: uri
             * @description URL to HLS playlist for adaptive streaming
             */
            hlsPlaylistUrl?: string;
            /**
             * Format: uri
             * @description URL to optimized MP4 for progressive download
             */
            mp4StreamUrl?: string;
            /** @description S3 key prefix for processed video outputs */
            processedS3KeyPrefix?: string;
            /** @description Time markers for match periods to enable trimmed video processing */
            matchTimeMarkers?: components["schemas"]["MatchTimeMarkers"];
            /** @description AWS MediaConvert job ID for trimmed video processing */
            trimmedMediaConvertJobId?: string;
            /** @description AWS MediaConvert job ID for clips processing */
            clipsMediaConvertJobId?: string;
            /**
             * @description Status of trimmed video processing
             * @enum {string}
             */
            trimmedProcessingStatus?: "pending" | "processing" | "completed" | "failed";
            /**
             * @description Status of clips processing
             * @enum {string}
             */
            clipsProcessingStatus?: "pending" | "processing" | "completed" | "failed";
            /**
             * Format: uri
             * @description URL to trimmed video HLS playlist
             */
            trimmedHlsPlaylistUrl?: string;
            /**
             * Format: uri
             * @description URL to trimmed video MP4 stream
             */
            trimmedMp4StreamUrl?: string;
            /** @description S3 key for trimmed video file */
            trimmedS3Key?: string;
            /**
             * Format: uri
             * @description URL to trimmed video file
             */
            trimmedS3Url?: string;
            /** @description Time markers adjusted for trimmed video (relative to trimmed video start) */
            trimmedMatchTimeMarkers?: components["schemas"]["MatchTimeMarkers"];
            /** @description S3 key prefix for video clips */
            clipsS3KeyPrefix?: string;
            /** @description Number of clips generated for first half */
            firstHalfClipsCount?: number;
            /** @description Number of clips generated for second half */
            secondHalfClipsCount?: number;
            /**
             * @description Whether this video is publicly accessible without authentication
             * @default false
             */
            isPublic: boolean;
        };
        VideoDbItem: components["schemas"]["DynamoDbItem"] & components["schemas"]["Video"] & {
            /** @description Game ID for team games, or PublicGame for public games */
            PK?: unknown | unknown;
            SK?: unknown;
            /** @description Video ID for team videos, or PublicVideo for public videos */
            GSI2PK: unknown | unknown;
            GSI2SK: unknown;
            /** @enum {unknown} */
            entityType?: "VIDEO";
        };
        CreateVideoRequest: {
            /** Format: uuid */
            gameId: string;
            /** @default Untitled Video */
            title: string;
            description?: string;
            /** @description S3 key for the video file. Either s3Key or videoUrl must be provided. */
            s3Key?: string;
            /**
             * Format: uri
             * @description URL to download the video from. The video will be downloaded and uploaded to S3. Either s3Key or videoUrl must be provided.
             */
            videoUrl?: string;
            /**
             * Format: uri
             * @description Optional - will be computed from CloudFront URL and s3Key if not provided
             */
            s3Url?: string;
            /**
             * @default full_game
             * @enum {string}
             */
            videoType: "highlight" | "full_game" | "training" | "interview" | "analysis" | "other";
            /**
             * @default processing
             * @enum {string}
             */
            status: "processing" | "ready" | "failed" | "archived";
            duration?: number;
            fileSize?: number;
            videoMetadata?: {
                resolution?: string;
                framerate?: number;
                codec?: string;
                bitrate?: number;
                format?: string;
            };
            thumbnailS3Key?: string;
            /**
             * Format: uri
             * @description Optional - will be computed from CloudFront URL and thumbnailS3Key if not provided
             */
            thumbnailS3Url?: string;
            tags?: string[];
            /**
             * @description Whether this video should be publicly accessible without authentication
             * @default false
             */
            isPublic: boolean;
        };
        /** @description Request to upload a video from a URL asynchronously */
        UploadVideoFromUrlRequest: {
            /**
             * Format: uuid
             * @description ID of the game to associate the video with
             */
            gameId: string;
            /**
             * Format: uri
             * @description URL of the video to download and upload to S3
             */
            videoUrl: string;
        };
        UpdateVideoRequest: {
            title?: string;
            description?: string;
            /** @enum {string} */
            videoType?: "highlight" | "full_game" | "training" | "interview" | "analysis" | "other";
            /** @enum {string} */
            status?: "processing" | "ready" | "failed" | "archived";
            duration?: number;
            fileSize?: number;
            videoMetadata?: {
                resolution?: string;
                framerate?: number;
                codec?: string;
                bitrate?: number;
                format?: string;
            };
            thumbnailS3Key?: string;
            /** Format: uri */
            thumbnailS3Url?: string;
            tags?: string[];
            /** @description Whether this video should be publicly accessible without authentication */
            isPublic?: boolean;
            /** @description AWS MediaConvert job ID for video processing */
            mediaConvertJobId?: string;
            /**
             * Format: uri
             * @description URL to HLS playlist for adaptive streaming
             */
            hlsPlaylistUrl?: string;
            /**
             * Format: uri
             * @description URL to optimized MP4 for progressive download
             */
            mp4StreamUrl?: string;
            /** @description S3 key prefix for processed video outputs */
            processedS3KeyPrefix?: string;
            /** @description Time markers for match periods to enable trimmed video processing */
            matchTimeMarkers?: components["schemas"]["MatchTimeMarkers"];
            /** @description AWS MediaConvert job ID for trimmed video processing */
            trimmedMediaConvertJobId?: string;
            /** @description AWS MediaConvert job ID for clips processing */
            clipsMediaConvertJobId?: string;
            /**
             * @description Status of trimmed video processing
             * @enum {string}
             */
            trimmedProcessingStatus?: "pending" | "processing" | "completed" | "failed";
            /**
             * @description Status of clips processing
             * @enum {string}
             */
            clipsProcessingStatus?: "pending" | "processing" | "completed" | "failed";
            /**
             * Format: uri
             * @description URL to trimmed video HLS playlist
             */
            trimmedHlsPlaylistUrl?: string;
            /**
             * Format: uri
             * @description URL to trimmed video MP4 stream
             */
            trimmedMp4StreamUrl?: string;
            /** @description S3 key for trimmed video file */
            trimmedS3Key?: string;
            /**
             * Format: uri
             * @description URL to trimmed video file
             */
            trimmedS3Url?: string;
            /** @description Time markers adjusted for trimmed video (relative to trimmed video start) */
            trimmedMatchTimeMarkers?: components["schemas"]["MatchTimeMarkers"];
            /** @description S3 key prefix for video clips */
            clipsS3KeyPrefix?: string;
            /** @description Number of clips generated for first half */
            firstHalfClipsCount?: number;
            /** @description Number of clips generated for second half */
            secondHalfClipsCount?: number;
        };
        VideoResponse: {
            message?: string;
            data?: components["schemas"]["Video"];
        };
        VideoListResponse: {
            message?: string;
            data?: {
                result?: components["schemas"]["Video"][];
                /** @description Pagination token */
                nextToken?: string;
                /** @description Whether more results exist */
                hasMore?: boolean;
                pagination?: {
                    limit?: number;
                    hasMore?: boolean;
                };
            };
        };
        VideoUploadUrlResponse: {
            /**
             * Format: uri
             * @description Pre-signed S3 URL for uploading the video file
             */
            url?: string;
            /** @description S3 object key where the file will be stored */
            key?: string;
        };
        Analysis: components["schemas"]["BaseEntity"] & {
            /**
             * Format: uuid
             * @description ID of the video this analysis belongs to
             */
            videoId: string;
            /**
             * @description Type of AI analysis performed
             * @enum {string}
             */
            analysisType: "performance" | "tactical" | "technical" | "emotional" | "highlight_detection" | "player_tracking" | "event_detection" | "statistics" | "custom";
            /**
             * @description Current status of the analysis
             * @default queued
             * @enum {string}
             */
            status: "queued" | "processing" | "completed" | "failed" | "cancelled";
            /** @description Name of the AI model used for analysis */
            modelName: string;
            /** @description Version of the AI model used */
            modelVersion: string;
            /** @description Overall confidence score of the analysis (0-1) */
            confidence?: number;
            /** @description Time taken to process the analysis in milliseconds */
            processingTimeMs?: number;
            /** @description The actual analysis results (flexible JSON structure) */
            analysisData?: {
                [key: string]: unknown;
            };
            /** @description Additional metadata about the analysis */
            metadata?: {
                /** @description Parameters used for the analysis */
                inputParameters?: {
                    [key: string]: unknown;
                };
                /** @description Video segments relevant to this analysis */
                videoSegments?: {
                    /** @description Start time in seconds */
                    startTime?: number;
                    /** @description End time in seconds */
                    endTime?: number;
                    description?: string;
                    confidence?: number;
                }[];
                /** @description Analysis-specific tags */
                tags?: string[];
            };
            /** @description Error details if analysis failed */
            errorDetails?: {
                errorCode?: string;
                errorMessage?: string;
                stackTrace?: string;
            };
            /** @description Username of who initiated the analysis */
            initiatedBy?: string;
            /**
             * Format: date-time
             * @description Timestamp when analysis was completed
             */
            completedAt?: string;
        };
        AnalysisDbItem: components["schemas"]["DynamoDbItem"] & components["schemas"]["Analysis"] & {
            PK?: unknown;
            SK?: unknown;
            GSI2PK: unknown;
            GSI2SK: unknown;
            /** @enum {unknown} */
            entityType?: "ANALYSIS";
        };
        CreateAnalysisRequest: {
            /** Format: uuid */
            videoId: string;
            /** @enum {string} */
            analysisType: "performance" | "tactical" | "technical" | "emotional" | "highlight_detection" | "player_tracking" | "event_detection" | "statistics" | "custom";
            modelName: string;
            modelVersion: string;
            /**
             * @default queued
             * @enum {string}
             */
            status: "queued" | "processing" | "completed" | "failed" | "cancelled";
            metadata?: {
                inputParameters?: {
                    [key: string]: unknown;
                };
                tags?: string[];
            };
        };
        UpdateAnalysisRequest: {
            /** @enum {string} */
            status?: "queued" | "processing" | "completed" | "failed" | "cancelled";
            confidence?: number;
            processingTimeMs?: number;
            analysisData?: {
                [key: string]: unknown;
            };
            metadata?: {
                inputParameters?: {
                    [key: string]: unknown;
                };
                videoSegments?: {
                    startTime?: number;
                    endTime?: number;
                    description?: string;
                    confidence?: number;
                }[];
                tags?: string[];
            };
            errorDetails?: {
                errorCode?: string;
                errorMessage?: string;
                stackTrace?: string;
            };
            /** Format: date-time */
            completedAt?: string;
        };
        AnalysisResponse: {
            message?: string;
            data?: components["schemas"]["Analysis"];
        };
        AnalysisListResponse: {
            message?: string;
            data?: {
                result?: components["schemas"]["Analysis"][];
                /** @description Pagination token */
                nextToken?: string;
                /** @description Whether more results exist */
                hasMore?: boolean;
                pagination?: {
                    limit?: number;
                    hasMore?: boolean;
                };
            };
        };
        /** @description Time markers for match periods to focus analysis on actual match play */
        MatchTimeMarkers: {
            /** @description Start of first half (throw-in) in seconds */
            firstHalfStart: number;
            /** @description Half time whistle in seconds */
            halfTime: number;
            /** @description Start of second half (throw-in) in seconds */
            secondHalfStart: number;
            /** @description Full time whistle (end of match) in seconds */
            fullTime: number;
        };
        /**
         * @description Type of prompt to use for video analysis
         * @enum {string}
         */
        PromptType: "GAA_EVENT_ANALYSIS";
        /** @description GAA Event Analysis output from Gemini API */
        AIEventOutput: {
            events: components["schemas"]["Event"][];
            matchMetadata: {
                /** @description Duration of the analyzed segment in seconds */
                totalDuration: number;
                teamsDetected: {
                    /** @enum {string} */
                    teamA?: "teamA";
                    /** @enum {string} */
                    teamB?: "teamB";
                };
                /** @description Overall confidence of the analysis */
                confidence: number;
                /** @description Time when halftime was detected (optional) */
                halftimeDetected?: number;
                /** @enum {string} */
                videoQuality: "low" | "medium" | "high" | "unknown";
            };
        };
        /** @description Individual GAA event detected in video */
        Event: {
            /** @description Time of event in seconds from segment start */
            time: number;
            /** @enum {string} */
            team: "Team A" | "Team B";
            action: components["schemas"]["ActionType"];
            outcome: components["schemas"]["OutcomeType"];
            cardType?: components["schemas"]["CardType"];
            confidence: number;
            /** @description Whether the event has been validated */
            validated: boolean;
        };
        /**
         * @description Type of GAA action
         * @enum {string}
         */
        ActionType: "Throw-up" | "Turnover" | "Kickout" | "Kick-in" | "Shot" | "Foul";
        /**
         * @description Type of card shown (for fouls)
         * @enum {string}
         */
        CardType: "Yellow Card" | "Black Card" | "Red Card";
        /**
         * @description Outcome of the action
         * @enum {string}
         */
        OutcomeType: "Won" | "Lost" | "N/A" | "1Point" | "2Point" | "Goal" | "Wide" | "Saved" | "Awarded To";
        /** @description Analysis result for a single video segment */
        VideoSegmentAnalysis: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            videoId: string;
            /** Format: uuid */
            gameId: string;
            /** Format: uuid */
            teamId: string;
            promptType: components["schemas"]["PromptType"];
            /** @description Index of the segment (0-based) */
            segmentIndex: number;
            /** @description Start time of segment in seconds */
            startTime: number;
            /** @description End time of segment in seconds */
            endTime: number;
            geminiResponse: components["schemas"]["AIEventOutput"];
            /** @description Match time markers used for this analysis */
            matchTimeMarkers?: components["schemas"]["MatchTimeMarkers"];
            /** @description Time taken to process this segment in milliseconds */
            processingTime: number;
            /** @description Gemini model used for analysis */
            model: string;
            /** @description Username who initiated the analysis */
            createdBy: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        /** @description Combined analysis that merges all segments into one analysis with corrected timing */
        CombinedVideoAnalysis: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            videoId: string;
            /** Format: uuid */
            gameId: string;
            /** Format: uuid */
            teamId: string;
            /** @description Links to the VideoAnalysisResponse that generated this */
            analysisId: string;
            promptType: components["schemas"]["PromptType"];
            /** @description Combined analysis data with corrected timing */
            combinedAnalysis: components["schemas"]["AIEventOutput"];
            /** @description Metadata about the segments that were combined */
            sourceSegments: {
                segmentIndex: number;
                startTime: number;
                endTime: number;
                eventsCount: number;
                confidence: number;
            }[];
            /** @description Total number of events in the combined analysis */
            totalEvents: number;
            /** @description Total duration of all analyzed segments in seconds */
            totalDuration: number;
            /** @description Average confidence across all segments */
            averageConfidence: number;
            /** @description Match time markers used for this analysis */
            matchTimeMarkers: components["schemas"]["MatchTimeMarkers"];
            /** @description Gemini model used for analysis */
            geminiModel: string;
            /** @description Total time taken to process all segments in milliseconds */
            totalProcessingTime: number;
            /** @description Username who initiated the analysis */
            createdBy: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        /** @description Response for video analysis request */
        VideoAnalysisResponse: {
            message?: string;
            data?: {
                /** @description Unique identifier for this analysis run */
                analysisId: string;
                /** Format: uuid */
                gameId: string;
                /** Format: uuid */
                videoId: string;
                /** Format: uuid */
                teamId: string;
                /** @enum {string} */
                status: "processing" | "completed" | "failed";
                segments: {
                    segmentIndex?: number;
                    startTime?: number;
                    endTime?: number;
                    promptType?: components["schemas"]["PromptType"];
                    geminiResponse?: components["schemas"]["AIEventOutput"];
                    processingTime?: number;
                    /** Format: date-time */
                    timestamp?: string;
                }[];
                totalSegments: number;
                completedSegments: number;
                /** Format: date-time */
                createdAt: string;
                /** Format: date-time */
                updatedAt: string;
                processingTimeMs: number;
            };
        };
        /** @description Response for retrieving video analyses - includes both segment and combined analyses */
        VideoAnalysisListResponse: {
            message?: string;
            data?: {
                /** Format: uuid */
                gameId: string;
                /** Format: uuid */
                videoId: string;
                /** @description Granular analysis per video segment */
                segmentAnalyses: components["schemas"]["VideoSegmentAnalysis"][];
                /** @description Full video analysis with corrected timing */
                combinedAnalyses: components["schemas"]["CombinedVideoAnalysis"][];
                pagination: {
                    nextToken?: string;
                    hasMore?: boolean;
                    limit?: number;
                };
                summary: {
                    /** @description Number of segment analyses */
                    totalSegmentAnalyses: number;
                    /** @description Total events across all segment analyses */
                    totalSegmentEvents: number;
                    /** @description Number of combined analyses */
                    totalCombinedAnalyses: number;
                    /** @description Total events across all combined analyses */
                    totalCombinedEvents: number;
                    /** @description All prompt types found in analyses */
                    promptTypes: components["schemas"]["PromptType"][];
                    /** @description List of segment indices (sorted) */
                    segments: number[];
                    breakdown: {
                        segmentAnalyses: {
                            count: number;
                            events: number;
                            /** @example Granular analysis per video segment */
                            description: string;
                        };
                        combinedAnalyses: {
                            count: number;
                            events: number;
                            /** @example Full video analysis with corrected timing */
                            description: string;
                        };
                    };
                };
            };
        };
        /** @description Response when creating an async task */
        AsyncTaskResponse: {
            /** @example Video analysis task created successfully */
            message: string;
            /**
             * Format: uuid
             * @description Unique identifier for the async task
             */
            taskId: string;
            /**
             * @description Initial task status
             * @enum {string}
             */
            status: "processing";
            /**
             * Format: uuid
             * @description Game ID from the request
             */
            gameId: string;
            /**
             * Format: uuid
             * @description Video ID from the request
             */
            videoId: string;
            /**
             * Format: uuid
             * @description Team ID from the request
             */
            teamId: string;
            /**
             * Format: uri
             * @description URL to poll for task completion
             * @example /api/tasks/550e8400-e29b-41d4-a716-446655440000
             */
            pollUrl: string;
            /**
             * @description Estimated time for task completion
             * @example 2-10 minutes depending on video length and segments
             */
            estimatedCompletionTime: string;
        };
        TaskBase: {
            /**
             * Format: uuid
             * @description Task partition key (same as taskId)
             */
            PK: string;
            /** @description Task sort key */
            SK: string;
            /**
             * Format: uuid
             * @description Unique task identifier
             */
            taskId: string;
            /**
             * @description Current task status
             * @enum {string}
             */
            status: "processing" | "completed" | "failed";
            /**
             * Format: date-time
             * @description Task creation timestamp
             */
            timestamp: string;
        };
        TaskProcessing: components["schemas"]["TaskBase"] & {
            /** @enum {string} */
            status?: "processing";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            status: "processing";
        };
        TaskCompleted: components["schemas"]["TaskBase"] & {
            /** @enum {string} */
            status?: "completed";
            result: components["schemas"]["VideoAnalysisResult"] | components["schemas"]["VideoUploadResult"];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            status: "completed";
        };
        TaskFailed: components["schemas"]["TaskBase"] & {
            /** @enum {string} */
            status?: "failed";
            result: string | {
                /** @description Error message */
                error?: string;
                /** @description Additional error details */
                details?: Record<string, never>;
            };
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            status: "failed";
        };
        /** @description Complete video analysis results from async task */
        VideoAnalysisResult: {
            /** @description Unique identifier for this analysis run */
            analysisId: string;
            /** Format: uuid */
            gameId: string;
            /** Format: uuid */
            videoId: string;
            /** Format: uuid */
            teamId: string;
            /** @enum {string} */
            status: "completed" | "failed";
            segments: {
                segmentIndex?: number;
                startTime?: number;
                endTime?: number;
                promptType?: components["schemas"]["PromptType"];
                geminiResponse?: components["schemas"]["AIEventOutput"];
                /** @description Raw response from Gemini API for debugging */
                rawGeminiResponse?: unknown;
                /** @description Processing time in milliseconds */
                processingTime?: number;
                /** Format: date-time */
                timestamp?: string;
            }[];
            totalSegments: number;
            completedSegments: number;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            processingTimeMs: number;
        };
        /** @description Result of video upload from URL async task */
        VideoUploadResult: {
            /**
             * Format: uuid
             * @description ID of the created video record
             */
            videoId: string;
            /** @description S3 key where the video was uploaded */
            s3Key: string;
            /** @description Size of the uploaded video file in bytes */
            fileSize: number;
            /** @description MIME type of the uploaded video */
            contentType: string;
            /**
             * Format: uri
             * @description Original URL that the video was downloaded from
             */
            originalUrl: string;
        };
        SuccessResponse: {
            /** @description Success message */
            message?: string;
            /** @description Response data */
            data?: Record<string, never> | unknown[] | string | number | boolean;
        };
        PaginatedResponse: {
            /** @description Success message */
            message?: string;
            data?: {
                /** @description Array of items */
                items?: unknown[];
                /** @description Token for next page */
                nextToken?: string;
                /** @description Whether there are more items */
                hasMore?: boolean;
                pagination?: {
                    /** @description Items per page */
                    limit?: number;
                    /** @description Whether there are more items */
                    hasMore?: boolean;
                };
            };
        };
        Error: {
            /** @description Error message */
            message: string;
            /** @description Detailed error information */
            details?: {
                field?: string;
                message?: string;
                code?: string;
            }[];
        };
        ValidationError: components["schemas"]["Error"] & {
            details?: {
                instancePath?: string;
                schemaPath?: string;
                keyword?: string;
                params?: Record<string, never>;
                message?: string;
            }[];
        };
        TeamWithMembership: components["schemas"]["Team"] & {
            userMembership?: {
                /** @description User's role in the team */
                role?: string;
                /** @description User's membership status */
                status?: string;
                /**
                 * Format: date-time
                 * @description When the user joined the team
                 */
                joinedAt?: string;
                /**
                 * Format: date-time
                 * @description When the user was invited to the team
                 */
                invitedAt?: string;
            };
        };
    };
    responses: {
        /** @description Bad request */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ValidationError"];
            };
        };
        /** @description Unauthorized */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Forbidden */
        Forbidden: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Resource not found */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Internal server error */
        InternalServerError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: {
        /** @description Entity ID */
        IdPathParam: string;
        /** @description Number of items to return (1-100) */
        LimitQueryParam: number;
        /** @description Token for pagination */
        NextTokenQueryParam: string;
        /** @description Sort order for results */
        SortOrderQueryParam: "asc" | "desc";
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    healthCheck: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Service is healthy */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example healthy */
                        status?: string;
                        /** Format: date-time */
                        timestamp?: string;
                        /** @example ClannAI API */
                        service?: string;
                    };
                };
            };
        };
    };
    listUsers: {
        parameters: {
            query?: {
                /** @description Number of items to return (1-100) */
                limit?: components["parameters"]["LimitQueryParam"];
                /** @description Token for pagination */
                nextToken?: components["parameters"]["NextTokenQueryParam"];
                /** @description Sort order for results */
                sortOrder?: components["parameters"]["SortOrderQueryParam"];
                /** @description Filter by user role */
                role?: "player" | "manager";
                /** @description Filter by active status */
                isActive?: boolean;
                /** @description Search by username, email, or name */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Users retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserListResponse"];
                };
            };
            500: components["responses"]["InternalServerError"];
        };
    };
    createUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserRequest"];
            };
        };
        responses: {
            /** @description User created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            500: components["responses"]["InternalServerError"];
        };
    };
    signupWithInvite: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignUpWithInviteRequest"];
            };
        };
        responses: {
            /** @description User profile completed and team joined */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                        data?: {
                            user?: components["schemas"]["User"];
                            team?: components["schemas"]["Team"];
                        };
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            /** @description Invalid invite code */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            500: components["responses"]["InternalServerError"];
        };
    };
    verifyInviteCode: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Team invite code */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invite code is valid */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                        data?: {
                            team?: {
                                /** Format: uuid */
                                id?: string;
                                name?: string;
                                sport?: string;
                                description?: string;
                            };
                        };
                    };
                };
            };
            /** @description Invalid or expired invite code */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            500: components["responses"]["InternalServerError"];
        };
    };
    joinTeam: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description 4-digit team invite code */
                    inviteCode: string;
                };
            };
        };
        responses: {
            /** @description Successfully joined team */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                        data?: {
                            user?: components["schemas"]["User"];
                            team?: components["schemas"]["Team"];
                            member?: components["schemas"]["Member"];
                        };
                    };
                };
            };
            /** @description Bad request (e.g., already joined a team, already a member) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            401: components["responses"]["Unauthorized"];
            /** @description Invalid invite code or team not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            500: components["responses"]["InternalServerError"];
        };
    };
    getCurrentUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User profile retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Entity ID */
                id: components["parameters"]["IdPathParam"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    updateUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Entity ID */
                id: components["parameters"]["IdPathParam"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserRequest"];
            };
        };
        responses: {
            /** @description User updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    deleteUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Entity ID */
                id: components["parameters"]["IdPathParam"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                    };
                };
            };
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    listTeams: {
        parameters: {
            query?: {
                /** @description Number of items to return (1-100) */
                limit?: components["parameters"]["LimitQueryParam"];
                /** @description Token for pagination */
                nextToken?: components["parameters"]["NextTokenQueryParam"];
                /** @description Sort order for results */
                sortOrder?: components["parameters"]["SortOrderQueryParam"];
                /** @description Filter by team status */
                status?: "active" | "inactive" | "archived";
                /** @description Filter by sport */
                sport?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Teams retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TeamListResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            500: components["responses"]["InternalServerError"];
        };
    };
    createTeam: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTeamRequest"];
            };
        };
        responses: {
            /** @description Team created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TeamResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getTeamByInviteCode: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 4-digit team invite code */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Team retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TeamResponse"];
                };
            };
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getTeam: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Team ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Team retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TeamResponse"];
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    updateTeam: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Team ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTeamRequest"];
            };
        };
        responses: {
            /** @description Team updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TeamResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    deleteTeam: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Team ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Team deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                    };
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    listMembers: {
        parameters: {
            query?: {
                /** @description Number of items to return (1-100) */
                limit?: components["parameters"]["LimitQueryParam"];
                /** @description Token for pagination */
                nextToken?: components["parameters"]["NextTokenQueryParam"];
                /** @description Sort order for results */
                sortOrder?: components["parameters"]["SortOrderQueryParam"];
                /** @description Filter by team ID */
                teamId?: string;
                /** @description Filter by member role */
                role?: "player" | "captain" | "coach" | "manager" | "assistant_coach";
                /** @description Filter by member status */
                status?: "active" | "inactive" | "pending" | "invited" | "suspended";
                /** @description Filter by user ID */
                userId?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Members retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MemberListResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            500: components["responses"]["InternalServerError"];
        };
    };
    createMember: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateMemberRequest"];
            };
        };
        responses: {
            /** @description Member added successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MemberResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getMember: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Member ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Member retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MemberResponse"];
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    updateMember: {
        parameters: {
            query: {
                /** @description Team ID for member lookup */
                teamId: string;
            };
            header?: never;
            path: {
                /** @description Member ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateMemberRequest"];
            };
        };
        responses: {
            /** @description Member updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MemberResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    deleteMember: {
        parameters: {
            query: {
                /** @description Team ID for member lookup */
                teamId: string;
            };
            header?: never;
            path: {
                /** @description Member ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Member removed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                    };
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    listGames: {
        parameters: {
            query?: {
                /** @description Number of items to return (1-100) */
                limit?: components["parameters"]["LimitQueryParam"];
                /** @description Token for pagination */
                nextToken?: components["parameters"]["NextTokenQueryParam"];
                /** @description Sort order for results */
                sortOrder?: components["parameters"]["SortOrderQueryParam"];
                /** @description Filter by team ID (required for team-scoped access) */
                teamId?: string;
                /** @description Filter by game status */
                status?: "scheduled" | "in_progress" | "completed" | "cancelled" | "postponed";
                /** @description Filter by game type */
                gameType?: "league" | "friendly" | "tournament" | "cup" | "playoff";
                /** @description Filter games from this date */
                dateFrom?: string;
                /** @description Filter games until this date */
                dateTo?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Games retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GameListResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            500: components["responses"]["InternalServerError"];
        };
    };
    createGame: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateGameRequest"];
            };
        };
        responses: {
            /** @description Game created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GameResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getGame: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Game ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Game retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GameResponse"];
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    updateGame: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Game ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateGameRequest"];
            };
        };
        responses: {
            /** @description Game updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GameResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    deleteGame: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Game ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Game deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                    };
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    listVideos: {
        parameters: {
            query?: {
                /** @description Number of items to return (1-100) */
                limit?: components["parameters"]["LimitQueryParam"];
                /** @description Token for pagination */
                nextToken?: components["parameters"]["NextTokenQueryParam"];
                /** @description Sort order for results */
                sortOrder?: components["parameters"]["SortOrderQueryParam"];
                /** @description Filter by game ID (required for game-scoped access) */
                gameId?: string;
                /** @description Filter by video type */
                videoType?: "highlight" | "full_game" | "training" | "interview" | "analysis" | "other";
                /** @description Filter by video status */
                status?: "processing" | "ready" | "failed" | "archived";
                /** @description Filter videos from this date */
                dateFrom?: string;
                /** @description Filter videos until this date */
                dateTo?: string;
                /** @description Search videos by title (partial match) */
                title?: string;
                /** @description Filter by tags (comma-separated) */
                tags?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Videos retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VideoListResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            500: components["responses"]["InternalServerError"];
        };
    };
    createVideo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateVideoRequest"];
            };
        };
        responses: {
            /** @description Video created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VideoResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getVideo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Video ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Video retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VideoResponse"];
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    updateVideo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Video ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateVideoRequest"];
            };
        };
        responses: {
            /** @description Video updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VideoResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    deleteVideo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Video ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Video deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                    };
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getVideoSignedUrl: {
        parameters: {
            query: {
                /** @description Name of the file to upload */
                filename: string;
            };
            header?: never;
            path: {
                /** @description Team ID */
                teamId: string;
                /** @description Game ID */
                gameId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Signed URL generated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VideoUploadUrlResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            500: components["responses"]["InternalServerError"];
        };
    };
    processVideo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Video ID */
                videoId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Video processing started successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                        data?: {
                            /** Format: uuid */
                            videoId?: string;
                            jobId?: string;
                            hlsPlaylistUrl?: string;
                            mp4StreamUrl?: string;
                            status?: string;
                        };
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    checkProcessingStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Video ID */
                videoId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Processing status retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                        data?: {
                            /** Format: uuid */
                            videoId?: string;
                            jobId?: string;
                            /** @enum {string} */
                            jobStatus?: "SUBMITTED" | "PROGRESSING" | "COMPLETE" | "CANCELED" | "ERROR";
                            /** @enum {string} */
                            videoStatus?: "processing" | "ready" | "failed";
                            hlsPlaylistUrl?: string;
                            mp4StreamUrl?: string;
                            progress?: number;
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            completedAt?: string;
                        };
                    };
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    uploadVideoFromUrl: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UploadVideoFromUrlRequest"];
            };
        };
        responses: {
            /** @description Upload task started successfully */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AsyncTaskResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            500: components["responses"]["InternalServerError"];
        };
    };
    listAnalyses: {
        parameters: {
            query?: {
                /** @description Number of items to return (1-100) */
                limit?: components["parameters"]["LimitQueryParam"];
                /** @description Token for pagination */
                nextToken?: components["parameters"]["NextTokenQueryParam"];
                /** @description Sort order for results */
                sortOrder?: components["parameters"]["SortOrderQueryParam"];
                /** @description Filter by video ID (required for video-scoped access) */
                videoId?: string;
                /** @description Filter by analysis type */
                analysisType?: "performance" | "tactical" | "technical" | "emotional" | "highlight_detection" | "player_tracking" | "event_detection" | "statistics" | "custom";
                /** @description Filter by analysis status */
                status?: "queued" | "processing" | "completed" | "failed" | "cancelled";
                /** @description Filter by AI model name */
                modelName?: string;
                /** @description Filter by AI model version */
                modelVersion?: string;
                /** @description Filter analyses from this date */
                dateFrom?: string;
                /** @description Filter analyses until this date */
                dateTo?: string;
                /** @description Filter by who initiated the analysis */
                initiatedBy?: string;
                /** @description Filter by minimum confidence score (0-1) */
                minConfidence?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Analyses retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AnalysisListResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            500: components["responses"]["InternalServerError"];
        };
    };
    createAnalysis: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateAnalysisRequest"];
            };
        };
        responses: {
            /** @description Analysis created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AnalysisResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getAnalysis: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Analysis ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Analysis retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AnalysisResponse"];
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    updateAnalysis: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Analysis ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateAnalysisRequest"];
            };
        };
        responses: {
            /** @description Analysis updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AnalysisResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    deleteAnalysis: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Analysis ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Analysis deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                    };
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getVideoAnalyses: {
        parameters: {
            query?: {
                /** @description Filter by prompt type */
                promptType?: components["schemas"]["PromptType"];
                /** @description Filter by specific segment index */
                segmentIndex?: number;
                /** @description Number of items to return (1-100) */
                limit?: components["parameters"]["LimitQueryParam"];
                /** @description Token for pagination */
                nextToken?: components["parameters"]["NextTokenQueryParam"];
            };
            header?: never;
            path: {
                /** @description Game ID */
                gameId: string;
                /** @description Video ID */
                videoId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Video analyses retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VideoAnalysisListResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    analyzeVideo: {
        parameters: {
            query: {
                /** @description Team ID for authorization */
                teamId: string;
                /** @description JSON array of prompt types to run (allows A/B testing of different prompts) */
                promptTypes?: string;
                /** @description Maximum number of segments to analyze (optional limit) */
                maxSegments?: number;
                /** @description Gemini model to use for analysis */
                geminiModel?: "gemini-1.5-flash" | "gemini-1.5-pro";
            };
            header?: never;
            path: {
                /** @description Game ID */
                gameId: string;
                /** @description Video ID */
                videoId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Video analysis task created successfully */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AsyncTaskResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    pollTask: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Task ID returned from async operation */
                taskId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Task status retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskProcessing"] | components["schemas"]["TaskCompleted"] | components["schemas"]["TaskFailed"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            /** @description Task not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            500: components["responses"]["InternalServerError"];
        };
    };
}
