// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { HealthCheckData, HealthCheckResponses, ListUsersData, ListUsersResponses, ListUsersErrors, CreateUserData, CreateUserResponses, CreateUserErrors, SignupWithInviteData, SignupWithInviteResponses, SignupWithInviteErrors, VerifyInviteCodeData, VerifyInviteCodeResponses, VerifyInviteCodeErrors, JoinTeamData, JoinTeamResponses, JoinTeamErrors, GetCurrentUserData, GetCurrentUserResponses, GetCurrentUserErrors, DeleteUserData, DeleteUserResponses, DeleteUserErrors, GetUserData, GetUserResponses, GetUserErrors, UpdateUserData, UpdateUserResponses, UpdateUserErrors, ListTeamsData, ListTeamsResponses, ListTeamsErrors, CreateTeamData, CreateTeamResponses, CreateTeamErrors, GetTeamByInviteCodeData, GetTeamByInviteCodeResponses, GetTeamByInviteCodeErrors, DeleteTeamData, DeleteTeamResponses, DeleteTeamErrors, GetTeamData, GetTeamResponses, GetTeamErrors, UpdateTeamData, UpdateTeamResponses, UpdateTeamErrors, ListMembersData, ListMembersResponses, ListMembersErrors, CreateMemberData, CreateMemberResponses, CreateMemberErrors, DeleteMemberData, DeleteMemberResponses, DeleteMemberErrors, GetMemberData, GetMemberResponses, GetMemberErrors, UpdateMemberData, UpdateMemberResponses, UpdateMemberErrors, ListGamesData, ListGamesResponses, ListGamesErrors, CreateGameData, CreateGameResponses, CreateGameErrors, DeleteGameData, DeleteGameResponses, DeleteGameErrors, GetGameData, GetGameResponses, GetGameErrors, UpdateGameData, UpdateGameResponses, UpdateGameErrors, ListVideosData, ListVideosResponses, ListVideosErrors, CreateVideoData, CreateVideoResponses, CreateVideoErrors, DeleteVideoData, DeleteVideoResponses, DeleteVideoErrors, GetVideoData, GetVideoResponses, GetVideoErrors, UpdateVideoData, UpdateVideoResponses, UpdateVideoErrors, GetVideoSignedUrlData, GetVideoSignedUrlResponses, GetVideoSignedUrlErrors, ProcessVideoData, ProcessVideoResponses, ProcessVideoErrors, CheckProcessingStatusData, CheckProcessingStatusResponses, CheckProcessingStatusErrors, UploadVideoFromUrlData, UploadVideoFromUrlResponses, UploadVideoFromUrlErrors, ListAnalysesData, ListAnalysesResponses, ListAnalysesErrors, CreateAnalysisData, CreateAnalysisResponses, CreateAnalysisErrors, DeleteAnalysisData, DeleteAnalysisResponses, DeleteAnalysisErrors, GetAnalysisData, GetAnalysisResponses, GetAnalysisErrors, UpdateAnalysisData, UpdateAnalysisResponses, UpdateAnalysisErrors, GetVideoAnalysesData, GetVideoAnalysesResponses, GetVideoAnalysesErrors, AnalyzeVideoData, AnalyzeVideoResponses, AnalyzeVideoErrors, PollTaskData, PollTaskResponses, PollTaskErrors, GetPublicGamesData, GetPublicGamesResponses, GetPublicGamesErrors, GetPublicGameData, GetPublicGameResponses, GetPublicGameErrors, GetPublicVideoData, GetPublicVideoResponses, GetPublicVideoErrors, GetPublicGameVideosData, GetPublicGameVideosResponses, GetPublicGameVideosErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Health check endpoint
 */
export const healthCheck = <ThrowOnError extends boolean = false>(options?: Options<HealthCheckData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<HealthCheckResponses, unknown, ThrowOnError>({
        url: '/health',
        ...options
    });
};

/**
 * List users with pagination
 * Retrieve a paginated list of users
 */
export const listUsers = <ThrowOnError extends boolean = false>(options?: Options<ListUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListUsersResponses, ListUsersErrors, ThrowOnError>({
        url: '/users',
        ...options
    });
};

/**
 * Create a new user profile
 * Create a user profile (typically called by system after Cognito signup)
 */
export const createUser = <ThrowOnError extends boolean = false>(options: Options<CreateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateUserResponses, CreateUserErrors, ThrowOnError>({
        url: '/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Complete signup with team invite code
 * Complete user profile after Cognito signup using team invite code
 */
export const signupWithInvite = <ThrowOnError extends boolean = false>(options: Options<SignupWithInviteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SignupWithInviteResponses, SignupWithInviteErrors, ThrowOnError>({
        url: '/users/signup-with-invite',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Verify team invite code
 * Check if invite code is valid and return team information
 */
export const verifyInviteCode = <ThrowOnError extends boolean = false>(options: Options<VerifyInviteCodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<VerifyInviteCodeResponses, VerifyInviteCodeErrors, ThrowOnError>({
        url: '/users/verify-invite-code/{code}',
        ...options
    });
};

/**
 * Join team with invite code
 * Allows existing users to join a team using an invite code
 */
export const joinTeam = <ThrowOnError extends boolean = false>(options: Options<JoinTeamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<JoinTeamResponses, JoinTeamErrors, ThrowOnError>({
        url: '/users/join-team',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get current user profile
 * Retrieves the profile of the currently authenticated user
 */
export const getCurrentUser = <ThrowOnError extends boolean = false>(options?: Options<GetCurrentUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCurrentUserResponses, GetCurrentUserErrors, ThrowOnError>({
        url: '/users/me',
        ...options
    });
};

/**
 * Delete user
 */
export const deleteUser = <ThrowOnError extends boolean = false>(options: Options<DeleteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserResponses, DeleteUserErrors, ThrowOnError>({
        url: '/users/{id}',
        ...options
    });
};

/**
 * Get user by ID
 */
export const getUser = <ThrowOnError extends boolean = false>(options: Options<GetUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserResponses, GetUserErrors, ThrowOnError>({
        url: '/users/{id}',
        ...options
    });
};

/**
 * Update user
 */
export const updateUser = <ThrowOnError extends boolean = false>(options: Options<UpdateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateUserResponses, UpdateUserErrors, ThrowOnError>({
        url: '/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List teams
 * Retrieves a paginated list of teams for the authenticated user
 */
export const listTeams = <ThrowOnError extends boolean = false>(options?: Options<ListTeamsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListTeamsResponses, ListTeamsErrors, ThrowOnError>({
        url: '/teams',
        ...options
    });
};

/**
 * Create a new team
 * Creates a new team for the authenticated user
 */
export const createTeam = <ThrowOnError extends boolean = false>(options: Options<CreateTeamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTeamResponses, CreateTeamErrors, ThrowOnError>({
        url: '/teams',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get team by invite code
 * Retrieves a team by its invite code for verification
 */
export const getTeamByInviteCode = <ThrowOnError extends boolean = false>(options: Options<GetTeamByInviteCodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTeamByInviteCodeResponses, GetTeamByInviteCodeErrors, ThrowOnError>({
        url: '/teams/by-invite-code/{code}',
        ...options
    });
};

/**
 * Delete team
 * Deletes an existing team
 */
export const deleteTeam = <ThrowOnError extends boolean = false>(options: Options<DeleteTeamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTeamResponses, DeleteTeamErrors, ThrowOnError>({
        url: '/teams/{id}',
        ...options
    });
};

/**
 * Get team by ID
 * Retrieves a specific team by its ID
 */
export const getTeam = <ThrowOnError extends boolean = false>(options: Options<GetTeamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTeamResponses, GetTeamErrors, ThrowOnError>({
        url: '/teams/{id}',
        ...options
    });
};

/**
 * Update team
 * Updates an existing team
 */
export const updateTeam = <ThrowOnError extends boolean = false>(options: Options<UpdateTeamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateTeamResponses, UpdateTeamErrors, ThrowOnError>({
        url: '/teams/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List team members
 * Retrieves a paginated list of team members for the authenticated user's teams
 */
export const listMembers = <ThrowOnError extends boolean = false>(options?: Options<ListMembersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListMembersResponses, ListMembersErrors, ThrowOnError>({
        url: '/members',
        ...options
    });
};

/**
 * Add a member to a team
 * Adds a new member to a team with specified role and permissions
 */
export const createMember = <ThrowOnError extends boolean = false>(options: Options<CreateMemberData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateMemberResponses, CreateMemberErrors, ThrowOnError>({
        url: '/members',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove member
 * Removes a member from a team
 */
export const deleteMember = <ThrowOnError extends boolean = false>(options: Options<DeleteMemberData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteMemberResponses, DeleteMemberErrors, ThrowOnError>({
        url: '/members/{id}',
        ...options
    });
};

/**
 * Get member by ID
 * Retrieves a specific team member by their ID
 */
export const getMember = <ThrowOnError extends boolean = false>(options: Options<GetMemberData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMemberResponses, GetMemberErrors, ThrowOnError>({
        url: '/members/{id}',
        ...options
    });
};

/**
 * Update member
 * Updates an existing team member's role, status, or permissions
 */
export const updateMember = <ThrowOnError extends boolean = false>(options: Options<UpdateMemberData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateMemberResponses, UpdateMemberErrors, ThrowOnError>({
        url: '/members/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List games
 * Retrieves a paginated list of games for teams
 */
export const listGames = <ThrowOnError extends boolean = false>(options?: Options<ListGamesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListGamesResponses, ListGamesErrors, ThrowOnError>({
        url: '/games',
        ...options
    });
};

/**
 * Create a new game/match
 * Creates a new game for a team
 */
export const createGame = <ThrowOnError extends boolean = false>(options: Options<CreateGameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateGameResponses, CreateGameErrors, ThrowOnError>({
        url: '/games',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete game
 * Deletes/cancels an existing game
 */
export const deleteGame = <ThrowOnError extends boolean = false>(options: Options<DeleteGameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteGameResponses, DeleteGameErrors, ThrowOnError>({
        url: '/games/{id}',
        ...options
    });
};

/**
 * Get game by ID
 * Retrieves a specific game by its ID
 */
export const getGame = <ThrowOnError extends boolean = false>(options: Options<GetGameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetGameResponses, GetGameErrors, ThrowOnError>({
        url: '/games/{id}',
        ...options
    });
};

/**
 * Update game
 * Updates an existing game's details, score, or status
 */
export const updateGame = <ThrowOnError extends boolean = false>(options: Options<UpdateGameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateGameResponses, UpdateGameErrors, ThrowOnError>({
        url: '/games/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List videos
 * Retrieves a paginated list of videos
 */
export const listVideos = <ThrowOnError extends boolean = false>(options?: Options<ListVideosData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListVideosResponses, ListVideosErrors, ThrowOnError>({
        url: '/videos',
        ...options
    });
};

/**
 * Create a new video
 * Creates a new video entry for a game
 */
export const createVideo = <ThrowOnError extends boolean = false>(options: Options<CreateVideoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateVideoResponses, CreateVideoErrors, ThrowOnError>({
        url: '/videos',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete video
 * Deletes an existing video and optionally removes the S3 file
 */
export const deleteVideo = <ThrowOnError extends boolean = false>(options: Options<DeleteVideoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteVideoResponses, DeleteVideoErrors, ThrowOnError>({
        url: '/videos/{id}',
        ...options
    });
};

/**
 * Get video by ID
 * Retrieves a specific video by its ID
 */
export const getVideo = <ThrowOnError extends boolean = false>(options: Options<GetVideoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetVideoResponses, GetVideoErrors, ThrowOnError>({
        url: '/videos/{id}',
        ...options
    });
};

/**
 * Update video
 * Updates an existing video's metadata, status, or details
 */
export const updateVideo = <ThrowOnError extends boolean = false>(options: Options<UpdateVideoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateVideoResponses, UpdateVideoErrors, ThrowOnError>({
        url: '/videos/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get signed URL for video upload
 * Generates a pre-signed S3 URL for uploading a video file
 */
export const getVideoSignedUrl = <ThrowOnError extends boolean = false>(options: Options<GetVideoSignedUrlData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetVideoSignedUrlResponses, GetVideoSignedUrlErrors, ThrowOnError>({
        url: '/videos/teams/{teamId}/games/{gameId}/upload-url',
        ...options
    });
};

/**
 * Process video with MediaConvert
 * Triggers AWS MediaConvert processing for adaptive streaming
 */
export const processVideo = <ThrowOnError extends boolean = false>(options: Options<ProcessVideoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProcessVideoResponses, ProcessVideoErrors, ThrowOnError>({
        url: '/videos/{videoId}/process',
        ...options
    });
};

/**
 * Check video processing status
 * Check the status of MediaConvert job for the video
 */
export const checkProcessingStatus = <ThrowOnError extends boolean = false>(options: Options<CheckProcessingStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CheckProcessingStatusResponses, CheckProcessingStatusErrors, ThrowOnError>({
        url: '/videos/{videoId}/processing-status',
        ...options
    });
};

/**
 * Upload video from URL asynchronously
 * Start an asynchronous task to download a video from a URL, upload it to S3, and create a video record
 */
export const uploadVideoFromUrl = <ThrowOnError extends boolean = false>(options: Options<UploadVideoFromUrlData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadVideoFromUrlResponses, UploadVideoFromUrlErrors, ThrowOnError>({
        url: '/videos/upload-from-url',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List analyses
 * Retrieves a paginated list of AI analyses
 */
export const listAnalyses = <ThrowOnError extends boolean = false>(options?: Options<ListAnalysesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListAnalysesResponses, ListAnalysesErrors, ThrowOnError>({
        url: '/analyses',
        ...options
    });
};

/**
 * Create a new AI analysis
 * Creates a new AI analysis for a video
 */
export const createAnalysis = <ThrowOnError extends boolean = false>(options: Options<CreateAnalysisData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateAnalysisResponses, CreateAnalysisErrors, ThrowOnError>({
        url: '/analyses',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete analysis
 * Deletes an existing AI analysis
 */
export const deleteAnalysis = <ThrowOnError extends boolean = false>(options: Options<DeleteAnalysisData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteAnalysisResponses, DeleteAnalysisErrors, ThrowOnError>({
        url: '/analyses/{id}',
        ...options
    });
};

/**
 * Get analysis by ID
 * Retrieves a specific AI analysis by its ID
 */
export const getAnalysis = <ThrowOnError extends boolean = false>(options: Options<GetAnalysisData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAnalysisResponses, GetAnalysisErrors, ThrowOnError>({
        url: '/analyses/{id}',
        ...options
    });
};

/**
 * Update analysis
 * Updates an existing AI analysis (typically used by AI processing systems)
 */
export const updateAnalysis = <ThrowOnError extends boolean = false>(options: Options<UpdateAnalysisData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateAnalysisResponses, UpdateAnalysisErrors, ThrowOnError>({
        url: '/analyses/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get video analysis results
 * Retrieves all analysis results for a specific video, with optional filtering by prompt type and segment
 */
export const getVideoAnalyses = <ThrowOnError extends boolean = false>(options: Options<GetVideoAnalysesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetVideoAnalysesResponses, GetVideoAnalysesErrors, ThrowOnError>({
        url: '/analyses/{gameId}/{videoId}',
        ...options
    });
};

/**
 * Start async video analysis with Gemini AI
 * Creates an async video analysis task that processes 15-second video clips in the background using stored match time markers. Returns immediately with a task ID for polling status.
 */
export const analyzeVideo = <ThrowOnError extends boolean = false>(options: Options<AnalyzeVideoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AnalyzeVideoResponses, AnalyzeVideoErrors, ThrowOnError>({
        url: '/analyses/{gameId}/{videoId}',
        ...options
    });
};

/**
 * Poll async task status
 * Check the status and results of an asynchronous task. Poll this endpoint to get task completion status and results.
 */
export const pollTask = <ThrowOnError extends boolean = false>(options: Options<PollTaskData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PollTaskResponses, PollTaskErrors, ThrowOnError>({
        url: '/tasks/{taskId}',
        ...options
    });
};

/**
 * List public games
 * Retrieves a paginated list of public games that are accessible without authentication
 */
export const getPublicGames = <ThrowOnError extends boolean = false>(options?: Options<GetPublicGamesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPublicGamesResponses, GetPublicGamesErrors, ThrowOnError>({
        url: '/public/games',
        ...options
    });
};

/**
 * Get public game by ID
 * Retrieves a specific public game by its ID. Only games marked as public are accessible.
 */
export const getPublicGame = <ThrowOnError extends boolean = false>(options: Options<GetPublicGameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPublicGameResponses, GetPublicGameErrors, ThrowOnError>({
        url: '/public/games/{id}',
        ...options
    });
};

/**
 * Get public video by ID
 * Retrieves a specific public video by its ID. Only videos marked as public are accessible.
 */
export const getPublicVideo = <ThrowOnError extends boolean = false>(options: Options<GetPublicVideoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPublicVideoResponses, GetPublicVideoErrors, ThrowOnError>({
        url: '/public/videos/{id}',
        ...options
    });
};

/**
 * List public videos for a game
 * Retrieves a paginated list of public videos associated with a specific public game
 */
export const getPublicGameVideos = <ThrowOnError extends boolean = false>(options: Options<GetPublicGameVideosData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPublicGameVideosResponses, GetPublicGameVideosErrors, ThrowOnError>({
        url: '/public/videos/games/{gameId}',
        ...options
    });
};