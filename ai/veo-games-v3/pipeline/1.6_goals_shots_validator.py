#!/usr/bin/env python3
"""
1.6. Goals & Shots Validator (V3)
AI-powered timeline validation using Gemini 2.5 Pro
Error-corrects fallible clip descriptions using football knowledge
Ported from V2 with improvements for V3 pipeline
"""

import sys
import os
import json
import time
from pathlib import Path
from datetime import datetime
import google.generativeai as genai
from dotenv import load_dotenv

class GoalsShotsValidator:
    def __init__(self):
        """Initialize AI-powered validator with Gemini 2.5 Pro"""
        # Load environment variables from multiple locations
        env_paths = [
            Path(__file__).parent / '.env',
            Path(__file__).parent.parent / '.env', 
            Path(__file__).parent.parent.parent / '.env'
        ]
        
        for env_path in env_paths:
            if env_path.exists():
                load_dotenv(env_path)
                print(f"🔑 Loaded environment from: {env_path}")
                break
        
        api_key = os.getenv('GEMINI_API_KEY')
        if not api_key:
            raise ValueError("GEMINI_API_KEY not found in environment variables")
        
        genai.configure(api_key=api_key)
        self.model = genai.GenerativeModel('gemini-2.5-pro')
        print("🧠 Goals & Shots Validator initialized with Gemini 2.5 Pro")

    def load_team_config(self, match_id: str) -> dict:
        """Load team configuration from match setup"""
        config_path = Path(f"../outputs/{match_id}/match_config.json")
        if config_path.exists():
            with open(config_path, 'r') as f:
                return json.load(f)
        else:
            return {
                'team_a': {'name': 'Team A', 'jersey': 'first team colors'},
                'team_b': {'name': 'Team B', 'jersey': 'second team colors'}
            }

    def get_validation_prompt(self, timeline_content: str, team_config: dict) -> str:
        """Create prompt for AI-powered timeline validation"""
        team_a_name = team_config['team_a']['name']
        team_b_name = team_config['team_b']['name']
        team_a_colors = team_config['team_a']['jersey']
        team_b_colors = team_config['team_b']['jersey']
        
        return f"""You are an expert football analyst tasked with error-correcting a timeline generated by AI clip analysis.

CONTEXT:
- An AI system analyzed 15-second video clips of a football match between {team_a_name} vs {team_b_name}
- {team_a_name} wear {team_a_colors}
- {team_b_name} wear {team_b_colors}
- Each clip was described independently, but the AI is fallible and may hallucinate events
- Your job is to identify ACTUAL goals and shots that occurred using football knowledge and supporting evidence

VALIDATION RULES:
1. After every goal, there MUST be a kick off from center circle (any team can take it - AI may confuse team colors)
2. Teams cannot score multiple goals without a kickoff between them
3. Look for supporting evidence: celebrations, restarts, goalkeeper reactions, saves
4. Accept goals if there's ANY kickoff from center circle afterwards
5. Consider context clues across multiple timeline entries
6. Validate shots by looking for goalkeeper reactions, saves, blocks, or misses
7. Don't reject goals just because the "wrong" team kicks off - focus on the kickoff happening
8. Use actual team names: {team_a_name} and {team_b_name}

TIMELINE TO ANALYZE:
{timeline_content}

TASK:
Analyze this timeline and identify:
1. ACTUAL goals that happened (with strict validation)
2. ACTUAL shots that occurred (including outcome: saved, missed, blocked, goal)

For each validated goal, provide:
- Exact timestamp
- Which team scored ({team_a_name} or {team_b_name})
- Description of how the goal was scored (cross, long shot, rebound, etc.)
- Supporting evidence from timeline (kickoff, celebration, etc.)
- Confidence level (high/medium/low)

For each validated shot, provide:
- Exact timestamp  
- Which team shot ({team_a_name} or {team_b_name})
- Shot description (where from, type of shot)
- Outcome (saved/missed/blocked/goal)
- Supporting evidence

Output in this format:

VALIDATED GOALS:
[List actual goals with detailed descriptions and evidence]

VALIDATED SHOTS:
[List actual shots with descriptions and outcomes]

REJECTED CLAIMS: 
[List false goal/shot claims with reasoning]

ANALYSIS SUMMARY:
[Brief summary of actual match events, score, and key moments]

Be strict - only validate events with strong supporting evidence. Use the actual team names {team_a_name} and {team_b_name} consistently."""

    def analyze_timeline(self, match_id: str) -> bool:
        """AI-powered timeline analysis with error correction"""
        print(f"🧠 AI-Powered Timeline Validation for {match_id}")
        print(f"🎯 Using Gemini 2.5 Pro to error-correct fallible clip descriptions")
        
        data_dir = Path("../outputs") / match_id
        timeline_path = data_dir / "5_complete_timeline.txt"
        output_path = data_dir / "1.6_validated_timeline.txt"
        
        if not timeline_path.exists():
            print(f"❌ Timeline file not found: {timeline_path}")
            return False
        
        # Load team configuration
        team_config = self.load_team_config(match_id)
        print(f"👕 Teams: {team_config['team_a']['name']} vs {team_config['team_b']['name']}")
        
        # Read timeline
        with open(timeline_path, 'r') as f:
            timeline_content = f.read()
        
        print(f"📊 Analyzing timeline with AI football expertise...")
        print(f"🔍 Looking for goal validation patterns and football logic...")
        
        try:
            # Generate AI validation analysis
            response = self.model.generate_content(
                self.get_validation_prompt(timeline_content, team_config)
            )
            
            validation_result = response.text.strip()
            
            # Save the validated timeline
            with open(output_path, 'w') as f:
                f.write(f"# AI-Validated Timeline - {match_id}\n")
                f.write(f"# Generated: {datetime.now().isoformat()}\n")
                f.write(f"# Method: Gemini 2.5 Pro intelligent validation\n")
                f.write(f"# Teams: {team_config['team_a']['name']} vs {team_config['team_b']['name']}\n")
                f.write(f"# Context: Error-correcting fallible clip descriptions\n\n")
                f.write(validation_result)
            
            # Display results
            print(f"✅ AI Validation Complete!")
            print(f"📁 Validated timeline saved to: {output_path}")
            print("\n" + "="*60)
            print("🏈 VALIDATION RESULTS:")
            print("="*60)
            print(validation_result)
            print("="*60)
        
            return True
            
        except Exception as e:
            print(f"❌ AI validation failed: {str(e)}")
            return False

def main():
    if len(sys.argv) != 2:
        print("Usage: python 1.6_goals_shots_validator.py <match-id>")
        print("Example: python 1.6_goals_shots_validator.py 20250523-match-23-may-2025-3fc1de88")
        sys.exit(1)
    
    match_id = sys.argv[1]
    
    try:
        validator = GoalsShotsValidator()
        success = validator.analyze_timeline(match_id)
        
        if success:
            print("🎉 Goals & shots validation completed successfully!")
        else:
            print("❌ Validation failed!")
            sys.exit(1)
            
    except Exception as e:
        print(f"❌ Error: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()