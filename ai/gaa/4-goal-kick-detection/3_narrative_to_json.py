#!/usr/bin/env python3
"""
GAA Narrative to JSON Converter
Takes the flowing match narrative and extracts events into GAA Events Schema format
"""

import os
import re
import json
from pathlib import Path
import google.generativeai as genai
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Configure Gemini
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
if not GEMINI_API_KEY:
    raise ValueError("GEMINI_API_KEY environment variable not set")
genai.configure(api_key=GEMINI_API_KEY)

def load_match_narrative(narrative_file):
    """Load the flowing match narrative"""
    narrative_file = Path(narrative_file)
    
    if not narrative_file.exists():
        print(f"‚ùå Narrative file not found: {narrative_file}")
        return None
    
    with open(narrative_file, 'r') as f:
        content = f.read()
    
    # Extract just the narrative part (skip headers)
    narrative_start = content.find("### Live Match Commentary")
    if narrative_start != -1:
        narrative = content[narrative_start:]
    else:
        narrative = content
    
    return narrative

def extract_events_from_narrative(narrative):
    """Use AI to extract structured events from the flowing narrative"""
    
    prompt = f"""
    You are a GAA analyst extracting structured events from a flowing match narrative.

    TASK: Convert this flowing commentary into GAA Events Schema compliant JSON.

    MATCH NARRATIVE:
    {narrative}

    INSTRUCTIONS:
    1. Extract all significant GAA events from the narrative
    2. Convert timestamps like [02:30] to seconds (150 seconds)
    3. Map teams consistently: "blue/blue and white" = "red", "red/red and black" = "blue" 
    4. Identify event types and outcomes from the narrative context
    5. Create unique IDs for each event
    6. Set autoGenerated: true, validated: false for all events

    GAA EVENT TYPES TO EXTRACT:
    - Kickout: Goalkeeper restarts (mentioned as "kickout" or goalkeeper kicks)
    - Turnover: Possession changes (interceptions, tackles, loose balls)
    - Shot: Scoring attempts (points, goals, wide shots, saved shots)
    - Foul: Free kicks awarded, cards given
    - Throw-up: Match starts, restarts

    TEAM MAPPING (CRITICAL):
    - "red team" / "red team players" / "red team goalkeeper" / "red and black jerseys" ‚Üí "red" team
    - "blue team" / "blue team players" / "blue team goalkeeper" / "blue and white jerseys" ‚Üí "blue" team
    
    IMPORTANT: Red team = red, Blue team = blue in the JSON schema

    OUTCOME MAPPING:
    - Turnover: "Won" for team gaining possession, "Lost" for team losing it
    - Shot: "1Point" for points, "Goal" for goals, "Wide" for misses, "Saved" for saves
    - Kickout: "Won" if kicking team retained possession, "Lost" if opponents won it

    OUTPUT FORMAT (GAA Events Schema):
    {{
      "match_info": {{
        "title": "GAA Match - First 10 Minutes Events",
        "description": "Events extracted from flowing match narrative",
        "total_events": [number],
        "analysis_method": "AI narrative analysis"
      }},
      "events": [
        {{
          "id": "event_1",
          "time": [seconds from start],
          "team": "red" or "blue",
          "action": "Kickout" | "Turnover" | "Shot" | "Foul" | "Throw-up",
          "outcome": "Won" | "Lost" | "1Point" | "Goal" | "Wide" | "Saved" | "N/A",
          "autoGenerated": true,
          "validated": false
        }}
      ]
    }}

    IMPORTANT:
    - Only extract clear, definitive events mentioned in the narrative
    - Be precise with timing conversion ([MM:SS] to total seconds)
    - Maintain team consistency throughout
    - Focus on significant match events, not every ball touch
    - Include the goal and points mentioned in the narrative

    Extract the events as JSON:
    """
    
    try:
        print(f"ü§ñ Extracting events from narrative using Gemini 2.5 Pro...")
        
        model = genai.GenerativeModel("gemini-2.5-pro")
        response = model.generate_content(prompt)
        
        print(f"‚úÖ Event extraction complete!")
        
        # Extract JSON from response
        json_match = re.search(r'\{.*\}', response.text, re.DOTALL)
        if json_match:
            json_text = json_match.group(0)
            return json.loads(json_text)
        else:
            print("‚ùå Could not extract JSON from AI response")
            print("Raw response:", response.text[:500] + "...")
            return None
            
    except Exception as e:
        print(f"‚ùå Event extraction failed: {e}")
        return None

def validate_gaa_schema(event_data):
    """Validate the output against GAA Events Schema"""
    
    print("üîç Validating GAA Events Schema compliance...")
    
    errors = []
    warnings = []
    
    # Check required top-level fields
    if 'match_info' not in event_data:
        errors.append("Missing 'match_info' field")
    if 'events' not in event_data:
        errors.append("Missing 'events' field")
    
    # Validate events
    if 'events' in event_data:
        for i, event in enumerate(event_data['events']):
            # Check required fields
            required_fields = ['id', 'time', 'team', 'action', 'outcome', 'autoGenerated', 'validated']
            for field in required_fields:
                if field not in event:
                    errors.append(f"Event {i+1}: Missing required field '{field}'")
            
            # Check field types and values
            if 'team' in event and event['team'] not in ['red', 'blue']:
                errors.append(f"Event {i+1}: Invalid team '{event['team']}' (must be 'red' or 'blue')")
            
            valid_actions = ['Throw-up', 'Turnover', 'Kickout', 'Kick-in', 'Shot', 'Foul', 'Yellow Card', 'Black Card', 'Red Card', 'Half Time Whistle', 'Full Time Whistle']
            if 'action' in event and event['action'] not in valid_actions:
                warnings.append(f"Event {i+1}: Unusual action '{event['action']}'")
            
            valid_outcomes = ['Won', 'Lost', 'N/A', '1Point', '2Point', 'Goal', 'Wide', 'Saved', 'Awarded To']
            if 'outcome' in event and event['outcome'] not in valid_outcomes:
                warnings.append(f"Event {i+1}: Unusual outcome '{event['outcome']}'")
            
            if 'time' in event and not isinstance(event['time'], (int, float)):
                errors.append(f"Event {i+1}: Time must be a number")
    
    if errors:
        print("‚ùå Schema validation errors:")
        for error in errors:
            print(f"   - {error}")
        return False
    else:
        print("‚úÖ Schema validation passed!")
        if warnings:
            print("‚ö†Ô∏è  Warnings:")
            for warning in warnings:
                print(f"   - {warning}")
        return True

def save_events_json(event_data, output_dir):
    """Save the extracted events in GAA Events Schema format"""
    
    output_dir = Path(output_dir)
    output_dir.mkdir(parents=True, exist_ok=True)
    
    # Validate schema first
    if not validate_gaa_schema(event_data):
        print("‚ö†Ô∏è  Schema validation failed, but saving anyway...")
    
    # Save main events JSON
    events_json = output_dir / "match_events.json"
    with open(events_json, 'w') as f:
        json.dump(event_data, f, indent=2)
    print(f"üíæ Events JSON saved: {events_json}")
    
    # Save summary
    summary_file = output_dir / "events_summary.txt"
    with open(summary_file, 'w') as f:
        f.write("GAA MATCH EVENTS SUMMARY\n")
        f.write("=" * 40 + "\n\n")
        f.write(f"Total Events: {len(event_data.get('events', []))}\n")
        f.write(f"Source: Match narrative analysis\n")
        f.write(f"Schema: GAA Events Schema Compliant\n\n")
        
        # Count by type
        action_counts = {}
        team_counts = {'red': 0, 'blue': 0}
        
        for event in event_data.get('events', []):
            action = event.get('action', 'Unknown')
            team = event.get('team', 'Unknown')
            
            action_counts[action] = action_counts.get(action, 0) + 1
            if team in team_counts:
                team_counts[team] += 1
        
        f.write("Events by Type:\n")
        for action, count in sorted(action_counts.items()):
            f.write(f"  {action}: {count}\n")
        
        f.write(f"\nEvents by Team:\n")
        f.write(f"  Red Team: {team_counts['red']}\n")
        f.write(f"  Blue Team: {team_counts['blue']}\n\n")
        
        # List events chronologically
        f.write("Event Timeline:\n")
        for event in event_data.get('events', []):
            time_str = f"{event['time']//60:02.0f}:{event['time']%60:02.0f}"
            f.write(f"  {time_str} - {event['team']} {event['action']} ({event['outcome']})\n")
    
    print(f"üìÑ Summary saved: {summary_file}")
    
    return events_json

def main():
    print("üîÑ GAA NARRATIVE TO JSON CONVERTER")
    print("=" * 50)
    
    # Setup paths
    narrative_file = Path("results/match_narrative/match_narrative.txt")
    output_dir = Path("results/structured_events")
    
    # Load narrative
    print("üìñ Loading match narrative...")
    narrative = load_match_narrative(narrative_file)
    
    if not narrative:
        print("‚ùå No narrative found!")
        print(f"   Make sure to run 'narrative_synthesis.py' first")
        return
    
    print(f"‚úÖ Loaded narrative ({len(narrative):,} characters)")
    
    # Extract events
    print("üîÑ Extracting events from narrative...")
    event_data = extract_events_from_narrative(narrative)
    
    if not event_data:
        print("‚ùå Event extraction failed!")
        return
    
    # Save results
    print("üíæ Saving structured events...")
    events_json = save_events_json(event_data, output_dir)
    
    print(f"\n‚úÖ NARRATIVE TO JSON CONVERSION COMPLETE!")
    print(f"üìÅ Events JSON: {events_json}")
    print(f"üéØ GAA Events Schema compliant!")
    
    # Show summary
    total_events = len(event_data.get('events', []))
    red_count = sum(1 for e in event_data.get('events', []) if e.get('team') == 'red')
    blue_count = sum(1 for e in event_data.get('events', []) if e.get('team') == 'blue')
    
    print(f"\nüìä SUMMARY:")
    print(f"   Total Events: {total_events}")
    print(f"   Red Team Events: {red_count}")
    print(f"   Blue Team Events: {blue_count}")
    print(f"   Schema: GAA Events Schema Compliant ‚úÖ")
    print(f"   Source: Flowing match narrative")

if __name__ == "__main__":
    main() 